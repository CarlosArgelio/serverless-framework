service: my-service-api-app

provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: arn:aws:dynamodb:us-east-1:*:table/usersTable
        - Effect: Allow
          Action: 's3:*'
          Resource: arn:aws:s3:::bucket-serverless-test01242343213/*
      
  environment:
    BUCKET: bucket-serverless-test01242343213

# plugins:
#   - serverless-offline
#   - serverless-dynamodb-local

package:
  individually: True
  patterns:
    - "!*/**"
    - "!**"

custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

functions:
  get-users:
    handler: get-user/handler.users
    package:
      patterns:
        - "get-user/handler.js"
    events:
      - http:
          path: users/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
  post-users:
    handler: create-user/handler.create_users
    package:
      patterns:
        - "create-user/handler.js"
    events:
      - http:
          path: users
          method: post
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-users:
    handler: update-user/handler.update_users
    package:
      patterns:
        - "update-user/handler.js"
    events:
      - http:
          path: users/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  delete-users:
    handler: delete-user/handler.delete_users
    runtime: python3.9
    package:
      patterns:
        - "delete-user/handler.py"
    events:
      - http:
          path: users/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
  signeURL:
    handler: signedurl/handler.signedS3URL
    package:
      patterns:
        - "signedurl/handler.js"
    events:
      - http:
          path: signedurl
          method: get
          request:
            parameters:
              querystrings:
                filename: true
  thumbGenerator:
    handler: thumbnail/handler.thumbnailGenerator
    package:
      patterns:
        - "thumbnail/handler.js"
        - "node_modules/**"
    events:
      - s3:
          bucket: bucket-serverless-test01242343213
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: PublicRead
        BucketName: bucket-serverless-test01242343213
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal: '*'